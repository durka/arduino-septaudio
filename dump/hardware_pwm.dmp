
/var/folders/gb/zls3cj_s60b1lvx2w2912bg80000gn/T/build4825331210703392228.tmp/pwm_hardware.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_11>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_16>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_18>
  4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_19>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	8d 00       	.word	0x008d	; ????
  6a:	9b 02       	muls	r25, r27

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e0 e2       	ldi	r30, 0x20	; 32
  80:	f9 e0       	ldi	r31, 0x09	; 9
  82:	02 c0       	rjmp	.+4      	; 0x88 <.do_copy_data_start>

00000084 <.do_copy_data_loop>:
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0

00000088 <.do_copy_data_start>:
  88:	ac 31       	cpi	r26, 0x1C	; 28
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <.do_copy_data_loop>

0000008e <__do_clear_bss>:
  8e:	11 e0       	ldi	r17, 0x01	; 1
  90:	ac e1       	ldi	r26, 0x1C	; 28
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a5 3d       	cpi	r26, 0xD5	; 213
  9a:	b1 07       	cpc	r27, r17
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	cc e6       	ldi	r28, 0x6C	; 108
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <.do_global_ctors_start>

000000a6 <.do_global_ctors_loop>:
  a6:	22 97       	sbiw	r28, 0x02	; 2
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 8a 04 	call	0x914	; 0x914 <__tablejump__>

000000ae <.do_global_ctors_start>:
  ae:	c8 36       	cpi	r28, 0x68	; 104
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <.do_global_ctors_loop>
  b4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <main>
  b8:	0c 94 8e 04 	jmp	0x91c	; 0x91c <_exit>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_11>:
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
  d6:	80 91 20 01 	lds	r24, 0x0120
  da:	90 91 21 01 	lds	r25, 0x0121
  de:	fc 01       	movw	r30, r24
  e0:	e3 70       	andi	r30, 0x03	; 3
  e2:	f0 70       	andi	r31, 0x00	; 0
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ec 5f       	subi	r30, 0xFC	; 252
  ea:	fe 4f       	sbci	r31, 0xFE	; 254
  ec:	20 81       	ld	r18, Z
  ee:	31 81       	ldd	r19, Z+1	; 0x01
  f0:	30 93 8b 00 	sts	0x008B, r19
  f4:	20 93 8a 00 	sts	0x008A, r18
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 21 01 	sts	0x0121, r25
  fe:	80 93 20 01 	sts	0x0120, r24
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <loop>:
 118:	08 95       	ret

0000011a <_GLOBAL__I_input_TOP>:
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	88 ec       	ldi	r24, 0xC8	; 200
 120:	93 e4       	ldi	r25, 0x43	; 67
 122:	20 91 00 01 	lds	r18, 0x0100
 126:	30 91 01 01 	lds	r19, 0x0101
 12a:	40 91 02 01 	lds	r20, 0x0102
 12e:	50 91 03 01 	lds	r21, 0x0103
 132:	0e 94 ad 03 	call	0x75a	; 0x75a <__divsf3>
 136:	60 93 1c 01 	sts	0x011C, r22
 13a:	70 93 1d 01 	sts	0x011D, r23
 13e:	80 93 1e 01 	sts	0x011E, r24
 142:	90 93 1f 01 	sts	0x011F, r25
 146:	08 95       	ret

00000148 <setup>:
 148:	8a ea       	ldi	r24, 0xAA	; 170
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	40 e8       	ldi	r20, 0x80	; 128
 14e:	55 e2       	ldi	r21, 0x25	; 37
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_ZN14HardwareSerial5beginEm>
 158:	f8 94       	cli
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	84 b9       	out	0x04, r24	; 4
 15e:	e0 e8       	ldi	r30, 0x80	; 128
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	10 82       	st	Z, r1
 164:	a1 e8       	ldi	r26, 0x81	; 129
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	1c 92       	st	X, r1
 16a:	83 e3       	ldi	r24, 0x33	; 51
 16c:	80 83       	st	Z, r24
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	8c 93       	st	X, r24
 172:	80 e9       	ldi	r24, 0x90	; 144
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	90 93 89 00 	sts	0x0089, r25
 17a:	80 93 88 00 	sts	0x0088, r24
 17e:	84 e6       	ldi	r24, 0x64	; 100
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 8b 00 	sts	0x008B, r25
 186:	80 93 8a 00 	sts	0x008A, r24
 18a:	ef e6       	ldi	r30, 0x6F	; 111
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	82 60       	ori	r24, 0x02	; 2
 192:	80 83       	st	Z, r24
 194:	17 b8       	out	0x07, r1	; 7
 196:	ac e7       	ldi	r26, 0x7C	; 124
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	1c 92       	st	X, r1
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	10 82       	st	Z, r1
 1a2:	80 e4       	ldi	r24, 0x40	; 64
 1a4:	8c 93       	st	X, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	85 60       	ori	r24, 0x05	; 5
 1aa:	80 83       	st	Z, r24
 1ac:	80 81       	ld	r24, Z
 1ae:	80 68       	ori	r24, 0x80	; 128
 1b0:	80 83       	st	Z, r24
 1b2:	14 bc       	out	0x24, r1	; 36
 1b4:	15 bc       	out	0x25, r1	; 37
 1b6:	85 b5       	in	r24, 0x25	; 37
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	85 bd       	out	0x25, r24	; 37
 1bc:	78 94       	sei
 1be:	08 95       	ret

000001c0 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 1c0:	08 95       	ret

000001c2 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 1da:	80 91 c0 00 	lds	r24, 0x00C0
 1de:	82 fd       	sbrc	r24, 2
 1e0:	1d c0       	rjmp	.+58     	; 0x21c <__vector_18+0x5a>
      unsigned char c = UDR0;
 1e2:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 1e6:	20 91 62 01 	lds	r18, 0x0162
 1ea:	30 91 63 01 	lds	r19, 0x0163

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	2f 73       	andi	r18, 0x3F	; 63
 1f4:	30 70       	andi	r19, 0x00	; 0
 1f6:	80 91 64 01 	lds	r24, 0x0164
 1fa:	90 91 65 01 	lds	r25, 0x0165
 1fe:	28 17       	cp	r18, r24
 200:	39 07       	cpc	r19, r25
 202:	71 f0       	breq	.+28     	; 0x220 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 204:	e0 91 62 01 	lds	r30, 0x0162
 208:	f0 91 63 01 	lds	r31, 0x0163
 20c:	ee 5d       	subi	r30, 0xDE	; 222
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	40 83       	st	Z, r20
    buffer->head = i;
 212:	30 93 63 01 	sts	0x0163, r19
 216:	20 93 62 01 	sts	0x0162, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 21c:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 238:	e0 91 b6 01 	lds	r30, 0x01B6
 23c:	f0 91 b7 01 	lds	r31, 0x01B7
 240:	e0 5c       	subi	r30, 0xC0	; 192
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	81 91       	ld	r24, Z+
 246:	91 91       	ld	r25, Z+
 248:	20 81       	ld	r18, Z
 24a:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 24c:	82 1b       	sub	r24, r18
 24e:	93 0b       	sbc	r25, r19
 250:	8f 73       	andi	r24, 0x3F	; 63
 252:	90 70       	andi	r25, 0x00	; 0
 254:	89 2b       	or	r24, r25
 256:	11 f0       	breq	.+4      	; 0x25c <_Z14serialEventRunv+0x24>
 258:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z11serialEventv>
 25c:	08 95       	ret

0000025e <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 274:	20 91 a6 01 	lds	r18, 0x01A6
 278:	30 91 a7 01 	lds	r19, 0x01A7
 27c:	80 91 a8 01 	lds	r24, 0x01A8
 280:	90 91 a9 01 	lds	r25, 0x01A9
 284:	28 17       	cp	r18, r24
 286:	39 07       	cpc	r19, r25
 288:	31 f4       	brne	.+12     	; 0x296 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 28a:	80 91 c1 00 	lds	r24, 0x00C1
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	80 93 c1 00 	sts	0x00C1, r24
 294:	14 c0       	rjmp	.+40     	; 0x2be <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 296:	e0 91 a8 01 	lds	r30, 0x01A8
 29a:	f0 91 a9 01 	lds	r31, 0x01A9
 29e:	ea 59       	subi	r30, 0x9A	; 154
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 2a4:	80 91 a8 01 	lds	r24, 0x01A8
 2a8:	90 91 a9 01 	lds	r25, 0x01A9
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	8f 73       	andi	r24, 0x3F	; 63
 2b0:	90 70       	andi	r25, 0x00	; 0
 2b2:	90 93 a9 01 	sts	0x01A9, r25
 2b6:	80 93 a8 01 	sts	0x01A8, r24
	
  #if defined(UDR0)
    UDR0 = c;
 2ba:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	3f 91       	pop	r19
 2c8:	2f 91       	pop	r18
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
 2e8:	7a 01       	movw	r14, r20
 2ea:	8b 01       	movw	r16, r22
 2ec:	dd 24       	eor	r13, r13
 2ee:	40 30       	cpi	r20, 0x00	; 0
 2f0:	81 ee       	ldi	r24, 0xE1	; 225
 2f2:	58 07       	cpc	r21, r24
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	68 07       	cpc	r22, r24
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	78 07       	cpc	r23, r24
 2fc:	11 f0       	breq	.+4      	; 0x302 <_ZN14HardwareSerial5beginEm+0x2e>
 2fe:	dd 24       	eor	r13, r13
 300:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	a9 2e       	mov	r10, r25
 306:	b1 2c       	mov	r11, r1
 308:	ec 89       	ldd	r30, Y+20	; 0x14
 30a:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 30c:	dd 20       	and	r13, r13
 30e:	69 f0       	breq	.+26     	; 0x32a <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 310:	c5 01       	movw	r24, r10
 312:	08 a0       	ldd	r0, Y+32	; 0x20
 314:	02 c0       	rjmp	.+4      	; 0x31a <_ZN14HardwareSerial5beginEm+0x46>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <_ZN14HardwareSerial5beginEm+0x42>
 31e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	79 e0       	ldi	r23, 0x09	; 9
 324:	8d e3       	ldi	r24, 0x3D	; 61
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	05 c0       	rjmp	.+10     	; 0x334 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
 32a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 32c:	60 e8       	ldi	r22, 0x80	; 128
 32e:	74 e8       	ldi	r23, 0x84	; 132
 330:	8e e1       	ldi	r24, 0x1E	; 30
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	a8 01       	movw	r20, r16
 336:	97 01       	movw	r18, r14
 338:	0e 94 66 04 	call	0x8cc	; 0x8cc <__udivmodsi4>
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	40 40       	sbci	r20, 0x00	; 0
 342:	50 40       	sbci	r21, 0x00	; 0
 344:	56 95       	lsr	r21
 346:	47 95       	ror	r20
 348:	37 95       	ror	r19
 34a:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 34c:	80 e1       	ldi	r24, 0x10	; 16
 34e:	20 30       	cpi	r18, 0x00	; 0
 350:	38 07       	cpc	r19, r24
 352:	20 f0       	brcs	.+8      	; 0x35c <_ZN14HardwareSerial5beginEm+0x88>
 354:	dd 20       	and	r13, r13
 356:	11 f0       	breq	.+4      	; 0x35c <_ZN14HardwareSerial5beginEm+0x88>
 358:	dd 24       	eor	r13, r13
 35a:	d6 cf       	rjmp	.-84     	; 0x308 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 35c:	e8 89       	ldd	r30, Y+16	; 0x10
 35e:	f9 89       	ldd	r31, Y+17	; 0x11
 360:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 362:	ea 89       	ldd	r30, Y+18	; 0x12
 364:	fb 89       	ldd	r31, Y+19	; 0x13
 366:	20 83       	st	Z, r18

  transmitting = false;
 368:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 36a:	ee 89       	ldd	r30, Y+22	; 0x16
 36c:	ff 89       	ldd	r31, Y+23	; 0x17
 36e:	40 81       	ld	r20, Z
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	c9 01       	movw	r24, r18
 376:	0c 8c       	ldd	r0, Y+28	; 0x1c
 378:	02 c0       	rjmp	.+4      	; 0x37e <_ZN14HardwareSerial5beginEm+0xaa>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <_ZN14HardwareSerial5beginEm+0xa6>
 382:	48 2b       	or	r20, r24
 384:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 386:	ee 89       	ldd	r30, Y+22	; 0x16
 388:	ff 89       	ldd	r31, Y+23	; 0x17
 38a:	40 81       	ld	r20, Z
 38c:	c9 01       	movw	r24, r18
 38e:	0d 8c       	ldd	r0, Y+29	; 0x1d
 390:	02 c0       	rjmp	.+4      	; 0x396 <_ZN14HardwareSerial5beginEm+0xc2>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <_ZN14HardwareSerial5beginEm+0xbe>
 39a:	48 2b       	or	r20, r24
 39c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 39e:	ee 89       	ldd	r30, Y+22	; 0x16
 3a0:	ff 89       	ldd	r31, Y+23	; 0x17
 3a2:	40 81       	ld	r20, Z
 3a4:	c9 01       	movw	r24, r18
 3a6:	0e 8c       	ldd	r0, Y+30	; 0x1e
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_ZN14HardwareSerial5beginEm+0xda>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <_ZN14HardwareSerial5beginEm+0xd6>
 3b2:	48 2b       	or	r20, r24
 3b4:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 3b6:	ee 89       	ldd	r30, Y+22	; 0x16
 3b8:	ff 89       	ldd	r31, Y+23	; 0x17
 3ba:	80 81       	ld	r24, Z
 3bc:	0f 8c       	ldd	r0, Y+31	; 0x1f
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <_ZN14HardwareSerial5beginEm+0xf0>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <_ZN14HardwareSerial5beginEm+0xec>
 3c8:	20 95       	com	r18
 3ca:	28 23       	and	r18, r24
 3cc:	20 83       	st	Z, r18
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	bf 90       	pop	r11
 3de:	af 90       	pop	r10
 3e0:	08 95       	ret

000003e2 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 3e2:	dc 01       	movw	r26, r24
 3e4:	1c 96       	adiw	r26, 0x0c	; 12
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	1d 97       	sbiw	r26, 0x0d	; 13
 3ec:	e0 5c       	subi	r30, 0xC0	; 192
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	21 91       	ld	r18, Z+
 3f2:	31 91       	ld	r19, Z+
 3f4:	80 81       	ld	r24, Z
 3f6:	91 81       	ldd	r25, Z+1	; 0x01
 3f8:	28 1b       	sub	r18, r24
 3fa:	39 0b       	sbc	r19, r25
 3fc:	2f 73       	andi	r18, 0x3F	; 63
 3fe:	30 70       	andi	r19, 0x00	; 0
}
 400:	c9 01       	movw	r24, r18
 402:	08 95       	ret

00000404 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 404:	dc 01       	movw	r26, r24
 406:	1c 96       	adiw	r26, 0x0c	; 12
 408:	ed 91       	ld	r30, X+
 40a:	fc 91       	ld	r31, X
 40c:	1d 97       	sbiw	r26, 0x0d	; 13
 40e:	e0 5c       	subi	r30, 0xC0	; 192
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	20 81       	ld	r18, Z
 414:	31 81       	ldd	r19, Z+1	; 0x01
 416:	e0 54       	subi	r30, 0x40	; 64
 418:	f0 40       	sbci	r31, 0x00	; 0
 41a:	df 01       	movw	r26, r30
 41c:	ae 5b       	subi	r26, 0xBE	; 190
 41e:	bf 4f       	sbci	r27, 0xFF	; 255
 420:	8d 91       	ld	r24, X+
 422:	9c 91       	ld	r25, X
 424:	11 97       	sbiw	r26, 0x01	; 1
 426:	28 17       	cp	r18, r24
 428:	39 07       	cpc	r19, r25
 42a:	19 f4       	brne	.+6      	; 0x432 <_ZN14HardwareSerial4peekEv+0x2e>
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	3f ef       	ldi	r19, 0xFF	; 255
 430:	07 c0       	rjmp	.+14     	; 0x440 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 432:	8d 91       	ld	r24, X+
 434:	9c 91       	ld	r25, X
 436:	e8 0f       	add	r30, r24
 438:	f9 1f       	adc	r31, r25
 43a:	80 81       	ld	r24, Z
 43c:	28 2f       	mov	r18, r24
 43e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 440:	c9 01       	movw	r24, r18
 442:	08 95       	ret

00000444 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 444:	dc 01       	movw	r26, r24
 446:	1c 96       	adiw	r26, 0x0c	; 12
 448:	ed 91       	ld	r30, X+
 44a:	fc 91       	ld	r31, X
 44c:	1d 97       	sbiw	r26, 0x0d	; 13
 44e:	e0 5c       	subi	r30, 0xC0	; 192
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	20 81       	ld	r18, Z
 454:	31 81       	ldd	r19, Z+1	; 0x01
 456:	e0 54       	subi	r30, 0x40	; 64
 458:	f0 40       	sbci	r31, 0x00	; 0
 45a:	df 01       	movw	r26, r30
 45c:	ae 5b       	subi	r26, 0xBE	; 190
 45e:	bf 4f       	sbci	r27, 0xFF	; 255
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	11 97       	sbiw	r26, 0x01	; 1
 466:	28 17       	cp	r18, r24
 468:	39 07       	cpc	r19, r25
 46a:	19 f4       	brne	.+6      	; 0x472 <_ZN14HardwareSerial4readEv+0x2e>
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	3f ef       	ldi	r19, 0xFF	; 255
 470:	10 c0       	rjmp	.+32     	; 0x492 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 472:	8d 91       	ld	r24, X+
 474:	9c 91       	ld	r25, X
 476:	11 97       	sbiw	r26, 0x01	; 1
 478:	e8 0f       	add	r30, r24
 47a:	f9 1f       	adc	r31, r25
 47c:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 47e:	8d 91       	ld	r24, X+
 480:	9c 91       	ld	r25, X
 482:	11 97       	sbiw	r26, 0x01	; 1
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	8f 73       	andi	r24, 0x3F	; 63
 488:	90 70       	andi	r25, 0x00	; 0
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	9c 93       	st	X, r25
 48e:	8e 93       	st	-X, r24
    return c;
 490:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 492:	c9 01       	movw	r24, r18
 494:	08 95       	ret

00000496 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 496:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 498:	91 96       	adiw	r26, 0x21	; 33
 49a:	8c 91       	ld	r24, X
 49c:	91 97       	sbiw	r26, 0x21	; 33
 49e:	88 23       	and	r24, r24
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <_ZN14HardwareSerial5flushEv+0x1a>
 4a2:	54 96       	adiw	r26, 0x14	; 20
 4a4:	ed 91       	ld	r30, X+
 4a6:	fc 91       	ld	r31, X
 4a8:	55 97       	sbiw	r26, 0x15	; 21
 4aa:	80 81       	ld	r24, Z
 4ac:	86 ff       	sbrs	r24, 6
 4ae:	f9 cf       	rjmp	.-14     	; 0x4a2 <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 4b0:	91 96       	adiw	r26, 0x21	; 33
 4b2:	1c 92       	st	X, r1
}
 4b4:	08 95       	ret

000004b6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 4bc:	ee 85       	ldd	r30, Y+14	; 0x0e
 4be:	ff 85       	ldd	r31, Y+15	; 0x0f
 4c0:	e0 5c       	subi	r30, 0xC0	; 192
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	20 81       	ld	r18, Z
 4c6:	31 81       	ldd	r19, Z+1	; 0x01
 4c8:	e0 54       	subi	r30, 0x40	; 64
 4ca:	f0 40       	sbci	r31, 0x00	; 0
 4cc:	2f 5f       	subi	r18, 0xFF	; 255
 4ce:	3f 4f       	sbci	r19, 0xFF	; 255
 4d0:	2f 73       	andi	r18, 0x3F	; 63
 4d2:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 4d4:	df 01       	movw	r26, r30
 4d6:	ae 5b       	subi	r26, 0xBE	; 190
 4d8:	bf 4f       	sbci	r27, 0xFF	; 255
 4da:	8d 91       	ld	r24, X+
 4dc:	9c 91       	ld	r25, X
 4de:	11 97       	sbiw	r26, 0x01	; 1
 4e0:	28 17       	cp	r18, r24
 4e2:	39 07       	cpc	r19, r25
 4e4:	d1 f3       	breq	.-12     	; 0x4da <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 4e6:	e0 5c       	subi	r30, 0xC0	; 192
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ea:	80 81       	ld	r24, Z
 4ec:	91 81       	ldd	r25, Z+1	; 0x01
 4ee:	e0 54       	subi	r30, 0x40	; 64
 4f0:	f0 40       	sbci	r31, 0x00	; 0
 4f2:	e8 0f       	add	r30, r24
 4f4:	f9 1f       	adc	r31, r25
 4f6:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 4f8:	ee 85       	ldd	r30, Y+14	; 0x0e
 4fa:	ff 85       	ldd	r31, Y+15	; 0x0f
 4fc:	e0 5c       	subi	r30, 0xC0	; 192
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	31 83       	std	Z+1, r19	; 0x01
 502:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 504:	ee 89       	ldd	r30, Y+22	; 0x16
 506:	ff 89       	ldd	r31, Y+23	; 0x17
 508:	20 81       	ld	r18, Z
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0f 8c       	ldd	r0, Y+31	; 0x1f
 510:	02 c0       	rjmp	.+4      	; 0x516 <_ZN14HardwareSerial5writeEh+0x60>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	0a 94       	dec	r0
 518:	e2 f7       	brpl	.-8      	; 0x512 <_ZN14HardwareSerial5writeEh+0x5c>
 51a:	28 2b       	or	r18, r24
 51c:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 522:	ec 89       	ldd	r30, Y+20	; 0x14
 524:	fd 89       	ldd	r31, Y+21	; 0x15
 526:	80 81       	ld	r24, Z
 528:	80 64       	ori	r24, 0x40	; 64
 52a:	80 83       	st	Z, r24
  
  return 1;
}
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 536:	10 92 ad 01 	sts	0x01AD, r1
 53a:	10 92 ac 01 	sts	0x01AC, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 53e:	88 ee       	ldi	r24, 0xE8	; 232
 540:	93 e0       	ldi	r25, 0x03	; 3
 542:	a0 e0       	ldi	r26, 0x00	; 0
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	80 93 ae 01 	sts	0x01AE, r24
 54a:	90 93 af 01 	sts	0x01AF, r25
 54e:	a0 93 b0 01 	sts	0x01B0, r26
 552:	b0 93 b1 01 	sts	0x01B1, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 556:	80 e1       	ldi	r24, 0x10	; 16
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	90 93 ab 01 	sts	0x01AB, r25
 55e:	80 93 aa 01 	sts	0x01AA, r24
{
  _rx_buffer = rx_buffer;
 562:	82 e2       	ldi	r24, 0x22	; 34
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	90 93 b7 01 	sts	0x01B7, r25
 56a:	80 93 b6 01 	sts	0x01B6, r24
  _tx_buffer = tx_buffer;
 56e:	86 e6       	ldi	r24, 0x66	; 102
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	90 93 b9 01 	sts	0x01B9, r25
 576:	80 93 b8 01 	sts	0x01B8, r24
  _ubrrh = ubrrh;
 57a:	85 ec       	ldi	r24, 0xC5	; 197
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 bb 01 	sts	0x01BB, r25
 582:	80 93 ba 01 	sts	0x01BA, r24
  _ubrrl = ubrrl;
 586:	84 ec       	ldi	r24, 0xC4	; 196
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	90 93 bd 01 	sts	0x01BD, r25
 58e:	80 93 bc 01 	sts	0x01BC, r24
  _ucsra = ucsra;
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 bf 01 	sts	0x01BF, r25
 59a:	80 93 be 01 	sts	0x01BE, r24
  _ucsrb = ucsrb;
 59e:	81 ec       	ldi	r24, 0xC1	; 193
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 c1 01 	sts	0x01C1, r25
 5a6:	80 93 c0 01 	sts	0x01C0, r24
  _ucsrc = ucsrc;
 5aa:	82 ec       	ldi	r24, 0xC2	; 194
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 c3 01 	sts	0x01C3, r25
 5b2:	80 93 c2 01 	sts	0x01C2, r24
  _udr = udr;
 5b6:	86 ec       	ldi	r24, 0xC6	; 198
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	90 93 c5 01 	sts	0x01C5, r25
 5be:	80 93 c4 01 	sts	0x01C4, r24
  _rxen = rxen;
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	80 93 c6 01 	sts	0x01C6, r24
  _txen = txen;
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	80 93 c7 01 	sts	0x01C7, r24
  _rxcie = rxcie;
 5ce:	87 e0       	ldi	r24, 0x07	; 7
 5d0:	80 93 c8 01 	sts	0x01C8, r24
  _udrie = udrie;
 5d4:	85 e0       	ldi	r24, 0x05	; 5
 5d6:	80 93 c9 01 	sts	0x01C9, r24
  _u2x = u2x;
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 ca 01 	sts	0x01CA, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 5e0:	08 95       	ret

000005e2 <main>:
#include <Arduino.h>

int main(void)
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
{
	init();
 5e6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 5ea:	0e 94 a4 00 	call	0x148	; 0x148 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 5ee:	cc e1       	ldi	r28, 0x1C	; 28
 5f0:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 5f2:	0e 94 8c 00 	call	0x118	; 0x118 <loop>
		if (serialEventRun) serialEventRun();
 5f6:	20 97       	sbiw	r28, 0x00	; 0
 5f8:	e1 f3       	breq	.-8      	; 0x5f2 <main+0x10>
 5fa:	0e 94 1c 01 	call	0x238	; 0x238 <_Z14serialEventRunv>
 5fe:	f9 cf       	rjmp	.-14     	; 0x5f2 <main+0x10>

00000600 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 600:	cf 92       	push	r12
 602:	df 92       	push	r13
 604:	ef 92       	push	r14
 606:	ff 92       	push	r15
 608:	0f 93       	push	r16
 60a:	1f 93       	push	r17
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	7c 01       	movw	r14, r24
 612:	6b 01       	movw	r12, r22
 614:	8a 01       	movw	r16, r20
 616:	c0 e0       	ldi	r28, 0x00	; 0
 618:	d0 e0       	ldi	r29, 0x00	; 0
 61a:	0f c0       	rjmp	.+30     	; 0x63a <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 61c:	d6 01       	movw	r26, r12
 61e:	6d 91       	ld	r22, X+
 620:	6d 01       	movw	r12, r26
 622:	d7 01       	movw	r26, r14
 624:	ed 91       	ld	r30, X+
 626:	fc 91       	ld	r31, X
 628:	01 90       	ld	r0, Z+
 62a:	f0 81       	ld	r31, Z
 62c:	e0 2d       	mov	r30, r0
 62e:	c7 01       	movw	r24, r14
 630:	09 95       	icall
 632:	c8 0f       	add	r28, r24
 634:	d9 1f       	adc	r29, r25
 636:	01 50       	subi	r16, 0x01	; 1
 638:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 63a:	01 15       	cp	r16, r1
 63c:	11 05       	cpc	r17, r1
 63e:	71 f7       	brne	.-36     	; 0x61c <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 640:	ce 01       	movw	r24, r28
 642:	df 91       	pop	r29
 644:	cf 91       	pop	r28
 646:	1f 91       	pop	r17
 648:	0f 91       	pop	r16
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	08 95       	ret

00000654 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	af 93       	push	r26
 668:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 66a:	80 91 d0 01 	lds	r24, 0x01D0
 66e:	90 91 d1 01 	lds	r25, 0x01D1
 672:	a0 91 d2 01 	lds	r26, 0x01D2
 676:	b0 91 d3 01 	lds	r27, 0x01D3
	unsigned char f = timer0_fract;
 67a:	30 91 d4 01 	lds	r19, 0x01D4

	m += MILLIS_INC;
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	a1 1d       	adc	r26, r1
 682:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 684:	23 2f       	mov	r18, r19
 686:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 688:	2d 37       	cpi	r18, 0x7D	; 125
 68a:	20 f0       	brcs	.+8      	; 0x694 <__vector_16+0x40>
		f -= FRACT_MAX;
 68c:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	a1 1d       	adc	r26, r1
 692:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 694:	20 93 d4 01 	sts	0x01D4, r18
	timer0_millis = m;
 698:	80 93 d0 01 	sts	0x01D0, r24
 69c:	90 93 d1 01 	sts	0x01D1, r25
 6a0:	a0 93 d2 01 	sts	0x01D2, r26
 6a4:	b0 93 d3 01 	sts	0x01D3, r27
	timer0_overflow_count++;
 6a8:	80 91 cc 01 	lds	r24, 0x01CC
 6ac:	90 91 cd 01 	lds	r25, 0x01CD
 6b0:	a0 91 ce 01 	lds	r26, 0x01CE
 6b4:	b0 91 cf 01 	lds	r27, 0x01CF
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	a1 1d       	adc	r26, r1
 6bc:	b1 1d       	adc	r27, r1
 6be:	80 93 cc 01 	sts	0x01CC, r24
 6c2:	90 93 cd 01 	sts	0x01CD, r25
 6c6:	a0 93 ce 01 	sts	0x01CE, r26
 6ca:	b0 93 cf 01 	sts	0x01CF, r27
}
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 6e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 6e6:	84 b5       	in	r24, 0x24	; 36
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 6ec:	84 b5       	in	r24, 0x24	; 36
 6ee:	81 60       	ori	r24, 0x01	; 1
 6f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 6f2:	85 b5       	in	r24, 0x25	; 37
 6f4:	82 60       	ori	r24, 0x02	; 2
 6f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 6f8:	85 b5       	in	r24, 0x25	; 37
 6fa:	81 60       	ori	r24, 0x01	; 1
 6fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 6fe:	ee e6       	ldi	r30, 0x6E	; 110
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	81 60       	ori	r24, 0x01	; 1
 706:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 708:	e1 e8       	ldi	r30, 0x81	; 129
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 70e:	80 81       	ld	r24, Z
 710:	82 60       	ori	r24, 0x02	; 2
 712:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 714:	80 81       	ld	r24, Z
 716:	81 60       	ori	r24, 0x01	; 1
 718:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 71a:	e0 e8       	ldi	r30, 0x80	; 128
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	81 60       	ori	r24, 0x01	; 1
 722:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 724:	e1 eb       	ldi	r30, 0xB1	; 177
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	84 60       	ori	r24, 0x04	; 4
 72c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 72e:	e0 eb       	ldi	r30, 0xB0	; 176
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	81 60       	ori	r24, 0x01	; 1
 736:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 738:	ea e7       	ldi	r30, 0x7A	; 122
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	80 81       	ld	r24, Z
 73e:	84 60       	ori	r24, 0x04	; 4
 740:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 742:	80 81       	ld	r24, Z
 744:	82 60       	ori	r24, 0x02	; 2
 746:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 748:	80 81       	ld	r24, Z
 74a:	81 60       	ori	r24, 0x01	; 1
 74c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 74e:	80 81       	ld	r24, Z
 750:	80 68       	ori	r24, 0x80	; 128
 752:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 754:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 758:	08 95       	ret

0000075a <__divsf3>:
 75a:	0c d0       	rcall	.+24     	; 0x774 <__divsf3x>
 75c:	7d c0       	rjmp	.+250    	; 0x858 <__fp_round>
 75e:	75 d0       	rcall	.+234    	; 0x84a <__fp_pscB>
 760:	40 f0       	brcs	.+16     	; 0x772 <__divsf3+0x18>
 762:	6c d0       	rcall	.+216    	; 0x83c <__fp_pscA>
 764:	30 f0       	brcs	.+12     	; 0x772 <__divsf3+0x18>
 766:	21 f4       	brne	.+8      	; 0x770 <__divsf3+0x16>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	19 f0       	breq	.+6      	; 0x772 <__divsf3+0x18>
 76c:	5e c0       	rjmp	.+188    	; 0x82a <__fp_inf>
 76e:	51 11       	cpse	r21, r1
 770:	a7 c0       	rjmp	.+334    	; 0x8c0 <__fp_szero>
 772:	61 c0       	rjmp	.+194    	; 0x836 <__fp_nan>

00000774 <__divsf3x>:
 774:	82 d0       	rcall	.+260    	; 0x87a <__fp_split3>
 776:	98 f3       	brcs	.-26     	; 0x75e <__divsf3+0x4>

00000778 <__divsf3_pse>:
 778:	99 23       	and	r25, r25
 77a:	c9 f3       	breq	.-14     	; 0x76e <__divsf3+0x14>
 77c:	55 23       	and	r21, r21
 77e:	b1 f3       	breq	.-20     	; 0x76c <__divsf3+0x12>
 780:	95 1b       	sub	r25, r21
 782:	55 0b       	sbc	r21, r21
 784:	bb 27       	eor	r27, r27
 786:	aa 27       	eor	r26, r26
 788:	62 17       	cp	r22, r18
 78a:	73 07       	cpc	r23, r19
 78c:	84 07       	cpc	r24, r20
 78e:	38 f0       	brcs	.+14     	; 0x79e <__divsf3_pse+0x26>
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	22 0f       	add	r18, r18
 796:	33 1f       	adc	r19, r19
 798:	44 1f       	adc	r20, r20
 79a:	aa 1f       	adc	r26, r26
 79c:	a9 f3       	breq	.-22     	; 0x788 <__divsf3_pse+0x10>
 79e:	33 d0       	rcall	.+102    	; 0x806 <__divsf3_pse+0x8e>
 7a0:	0e 2e       	mov	r0, r30
 7a2:	3a f0       	brmi	.+14     	; 0x7b2 <__divsf3_pse+0x3a>
 7a4:	e0 e8       	ldi	r30, 0x80	; 128
 7a6:	30 d0       	rcall	.+96     	; 0x808 <__divsf3_pse+0x90>
 7a8:	91 50       	subi	r25, 0x01	; 1
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	e6 95       	lsr	r30
 7ae:	00 1c       	adc	r0, r0
 7b0:	ca f7       	brpl	.-14     	; 0x7a4 <__divsf3_pse+0x2c>
 7b2:	29 d0       	rcall	.+82     	; 0x806 <__divsf3_pse+0x8e>
 7b4:	fe 2f       	mov	r31, r30
 7b6:	27 d0       	rcall	.+78     	; 0x806 <__divsf3_pse+0x8e>
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	bb 1f       	adc	r27, r27
 7c0:	26 17       	cp	r18, r22
 7c2:	37 07       	cpc	r19, r23
 7c4:	48 07       	cpc	r20, r24
 7c6:	ab 07       	cpc	r26, r27
 7c8:	b0 e8       	ldi	r27, 0x80	; 128
 7ca:	09 f0       	breq	.+2      	; 0x7ce <__divsf3_pse+0x56>
 7cc:	bb 0b       	sbc	r27, r27
 7ce:	80 2d       	mov	r24, r0
 7d0:	bf 01       	movw	r22, r30
 7d2:	ff 27       	eor	r31, r31
 7d4:	93 58       	subi	r25, 0x83	; 131
 7d6:	5f 4f       	sbci	r21, 0xFF	; 255
 7d8:	2a f0       	brmi	.+10     	; 0x7e4 <__divsf3_pse+0x6c>
 7da:	9e 3f       	cpi	r25, 0xFE	; 254
 7dc:	51 05       	cpc	r21, r1
 7de:	68 f0       	brcs	.+26     	; 0x7fa <__divsf3_pse+0x82>
 7e0:	24 c0       	rjmp	.+72     	; 0x82a <__fp_inf>
 7e2:	6e c0       	rjmp	.+220    	; 0x8c0 <__fp_szero>
 7e4:	5f 3f       	cpi	r21, 0xFF	; 255
 7e6:	ec f3       	brlt	.-6      	; 0x7e2 <__divsf3_pse+0x6a>
 7e8:	98 3e       	cpi	r25, 0xE8	; 232
 7ea:	dc f3       	brlt	.-10     	; 0x7e2 <__divsf3_pse+0x6a>
 7ec:	86 95       	lsr	r24
 7ee:	77 95       	ror	r23
 7f0:	67 95       	ror	r22
 7f2:	b7 95       	ror	r27
 7f4:	f7 95       	ror	r31
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__divsf3_pse+0x74>
 7fa:	88 0f       	add	r24, r24
 7fc:	91 1d       	adc	r25, r1
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret
 806:	e1 e0       	ldi	r30, 0x01	; 1
 808:	66 0f       	add	r22, r22
 80a:	77 1f       	adc	r23, r23
 80c:	88 1f       	adc	r24, r24
 80e:	bb 1f       	adc	r27, r27
 810:	62 17       	cp	r22, r18
 812:	73 07       	cpc	r23, r19
 814:	84 07       	cpc	r24, r20
 816:	ba 07       	cpc	r27, r26
 818:	20 f0       	brcs	.+8      	; 0x822 <__divsf3_pse+0xaa>
 81a:	62 1b       	sub	r22, r18
 81c:	73 0b       	sbc	r23, r19
 81e:	84 0b       	sbc	r24, r20
 820:	ba 0b       	sbc	r27, r26
 822:	ee 1f       	adc	r30, r30
 824:	88 f7       	brcc	.-30     	; 0x808 <__divsf3_pse+0x90>
 826:	e0 95       	com	r30
 828:	08 95       	ret

0000082a <__fp_inf>:
 82a:	97 f9       	bld	r25, 7
 82c:	9f 67       	ori	r25, 0x7F	; 127
 82e:	80 e8       	ldi	r24, 0x80	; 128
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	08 95       	ret

00000836 <__fp_nan>:
 836:	9f ef       	ldi	r25, 0xFF	; 255
 838:	80 ec       	ldi	r24, 0xC0	; 192
 83a:	08 95       	ret

0000083c <__fp_pscA>:
 83c:	00 24       	eor	r0, r0
 83e:	0a 94       	dec	r0
 840:	16 16       	cp	r1, r22
 842:	17 06       	cpc	r1, r23
 844:	18 06       	cpc	r1, r24
 846:	09 06       	cpc	r0, r25
 848:	08 95       	ret

0000084a <__fp_pscB>:
 84a:	00 24       	eor	r0, r0
 84c:	0a 94       	dec	r0
 84e:	12 16       	cp	r1, r18
 850:	13 06       	cpc	r1, r19
 852:	14 06       	cpc	r1, r20
 854:	05 06       	cpc	r0, r21
 856:	08 95       	ret

00000858 <__fp_round>:
 858:	09 2e       	mov	r0, r25
 85a:	03 94       	inc	r0
 85c:	00 0c       	add	r0, r0
 85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0xc>
 860:	88 23       	and	r24, r24
 862:	52 f0       	brmi	.+20     	; 0x878 <__fp_round+0x20>
 864:	bb 0f       	add	r27, r27
 866:	40 f4       	brcc	.+16     	; 0x878 <__fp_round+0x20>
 868:	bf 2b       	or	r27, r31
 86a:	11 f4       	brne	.+4      	; 0x870 <__fp_round+0x18>
 86c:	60 ff       	sbrs	r22, 0
 86e:	04 c0       	rjmp	.+8      	; 0x878 <__fp_round+0x20>
 870:	6f 5f       	subi	r22, 0xFF	; 255
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	08 95       	ret

0000087a <__fp_split3>:
 87a:	57 fd       	sbrc	r21, 7
 87c:	90 58       	subi	r25, 0x80	; 128
 87e:	44 0f       	add	r20, r20
 880:	55 1f       	adc	r21, r21
 882:	59 f0       	breq	.+22     	; 0x89a <__fp_splitA+0x10>
 884:	5f 3f       	cpi	r21, 0xFF	; 255
 886:	71 f0       	breq	.+28     	; 0x8a4 <__fp_splitA+0x1a>
 888:	47 95       	ror	r20

0000088a <__fp_splitA>:
 88a:	88 0f       	add	r24, r24
 88c:	97 fb       	bst	r25, 7
 88e:	99 1f       	adc	r25, r25
 890:	61 f0       	breq	.+24     	; 0x8aa <__fp_splitA+0x20>
 892:	9f 3f       	cpi	r25, 0xFF	; 255
 894:	79 f0       	breq	.+30     	; 0x8b4 <__fp_splitA+0x2a>
 896:	87 95       	ror	r24
 898:	08 95       	ret
 89a:	12 16       	cp	r1, r18
 89c:	13 06       	cpc	r1, r19
 89e:	14 06       	cpc	r1, r20
 8a0:	55 1f       	adc	r21, r21
 8a2:	f2 cf       	rjmp	.-28     	; 0x888 <__fp_split3+0xe>
 8a4:	46 95       	lsr	r20
 8a6:	f1 df       	rcall	.-30     	; 0x88a <__fp_splitA>
 8a8:	08 c0       	rjmp	.+16     	; 0x8ba <__fp_splitA+0x30>
 8aa:	16 16       	cp	r1, r22
 8ac:	17 06       	cpc	r1, r23
 8ae:	18 06       	cpc	r1, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	f1 cf       	rjmp	.-30     	; 0x896 <__fp_splitA+0xc>
 8b4:	86 95       	lsr	r24
 8b6:	71 05       	cpc	r23, r1
 8b8:	61 05       	cpc	r22, r1
 8ba:	08 94       	sec
 8bc:	08 95       	ret

000008be <__fp_zero>:
 8be:	e8 94       	clt

000008c0 <__fp_szero>:
 8c0:	bb 27       	eor	r27, r27
 8c2:	66 27       	eor	r22, r22
 8c4:	77 27       	eor	r23, r23
 8c6:	cb 01       	movw	r24, r22
 8c8:	97 f9       	bld	r25, 7
 8ca:	08 95       	ret

000008cc <__udivmodsi4>:
 8cc:	a1 e2       	ldi	r26, 0x21	; 33
 8ce:	1a 2e       	mov	r1, r26
 8d0:	aa 1b       	sub	r26, r26
 8d2:	bb 1b       	sub	r27, r27
 8d4:	fd 01       	movw	r30, r26
 8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <__udivmodsi4_ep>

000008d8 <__udivmodsi4_loop>:
 8d8:	aa 1f       	adc	r26, r26
 8da:	bb 1f       	adc	r27, r27
 8dc:	ee 1f       	adc	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	a2 17       	cp	r26, r18
 8e2:	b3 07       	cpc	r27, r19
 8e4:	e4 07       	cpc	r30, r20
 8e6:	f5 07       	cpc	r31, r21
 8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__udivmodsi4_ep>
 8ea:	a2 1b       	sub	r26, r18
 8ec:	b3 0b       	sbc	r27, r19
 8ee:	e4 0b       	sbc	r30, r20
 8f0:	f5 0b       	sbc	r31, r21

000008f2 <__udivmodsi4_ep>:
 8f2:	66 1f       	adc	r22, r22
 8f4:	77 1f       	adc	r23, r23
 8f6:	88 1f       	adc	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	1a 94       	dec	r1
 8fc:	69 f7       	brne	.-38     	; 0x8d8 <__udivmodsi4_loop>
 8fe:	60 95       	com	r22
 900:	70 95       	com	r23
 902:	80 95       	com	r24
 904:	90 95       	com	r25
 906:	9b 01       	movw	r18, r22
 908:	ac 01       	movw	r20, r24
 90a:	bd 01       	movw	r22, r26
 90c:	cf 01       	movw	r24, r30
 90e:	08 95       	ret

00000910 <__tablejump2__>:
 910:	ee 0f       	add	r30, r30
 912:	ff 1f       	adc	r31, r31

00000914 <__tablejump__>:
 914:	05 90       	lpm	r0, Z+
 916:	f4 91       	lpm	r31, Z+
 918:	e0 2d       	mov	r30, r0
 91a:	09 94       	ijmp

0000091c <_exit>:
 91c:	f8 94       	cli

0000091e <__stop_program>:
 91e:	ff cf       	rjmp	.-2      	; 0x91e <__stop_program>
