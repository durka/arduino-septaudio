
/var/folders/gb/zls3cj_s60b1lvx2w2912bg80000gn/T/build6179652524281037539.tmp/pwm.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 47 01 	jmp	0x28e	; 0x28e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
  a6:	f8 94       	cli
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	15 b8       	out	0x05, r1	; 5
  ae:	10 92 80 00 	sts	0x0080, r1
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 89 00 	sts	0x0089, r25
  c0:	80 93 88 00 	sts	0x0088, r24
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	ef e6       	ldi	r30, 0x6F	; 111
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
  d4:	10 92 85 00 	sts	0x0085, r1
  d8:	10 92 84 00 	sts	0x0084, r1
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <__vector_11>:
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	80 91 02 01 	lds	r24, 0x0102
  f6:	90 91 03 01 	lds	r25, 0x0103
  fa:	89 2b       	or	r24, r25
  fc:	b9 f0       	breq	.+46     	; 0x12c <__vector_11+0x4c>
  fe:	80 91 88 00 	lds	r24, 0x0088
 102:	90 91 89 00 	lds	r25, 0x0089
 106:	20 91 00 01 	lds	r18, 0x0100
 10a:	30 91 01 01 	lds	r19, 0x0101
 10e:	80 57       	subi	r24, 0x70	; 112
 110:	9e 4f       	sbci	r25, 0xFE	; 254
 112:	82 1b       	sub	r24, r18
 114:	93 0b       	sbc	r25, r19
 116:	90 93 89 00 	sts	0x0089, r25
 11a:	80 93 88 00 	sts	0x0088, r24
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	15 b8       	out	0x05, r1	; 5
 122:	10 92 03 01 	sts	0x0103, r1
 126:	10 92 02 01 	sts	0x0102, r1
 12a:	15 c0       	rjmp	.+42     	; 0x156 <__vector_11+0x76>
 12c:	80 91 88 00 	lds	r24, 0x0088
 130:	90 91 89 00 	lds	r25, 0x0089
 134:	20 91 00 01 	lds	r18, 0x0100
 138:	30 91 01 01 	lds	r19, 0x0101
 13c:	28 0f       	add	r18, r24
 13e:	39 1f       	adc	r19, r25
 140:	30 93 89 00 	sts	0x0089, r19
 144:	20 93 88 00 	sts	0x0088, r18
 148:	2d 9a       	sbi	0x05, 5	; 5
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 03 01 	sts	0x0103, r25
 152:	80 93 02 01 	sts	0x0102, r24
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <loop>:
 168:	08 95       	ret

0000016a <main>:
#include <Arduino.h>

int main(void)
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
{
	init();
 16e:	0e 94 0c 01 	call	0x218	; 0x218 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 17a:	0e 94 b4 00 	call	0x168	; 0x168 <loop>
		if (serialEventRun) serialEventRun();
 17e:	20 97       	sbiw	r28, 0x00	; 0
 180:	e1 f3       	breq	.-8      	; 0x17a <main+0x10>
 182:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 186:	f9 cf       	rjmp	.-14     	; 0x17a <main+0x10>

00000188 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 19e:	80 91 08 01 	lds	r24, 0x0108
 1a2:	90 91 09 01 	lds	r25, 0x0109
 1a6:	a0 91 0a 01 	lds	r26, 0x010A
 1aa:	b0 91 0b 01 	lds	r27, 0x010B
	unsigned char f = timer0_fract;
 1ae:	30 91 0c 01 	lds	r19, 0x010C

	m += MILLIS_INC;
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 1b8:	23 2f       	mov	r18, r19
 1ba:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 1bc:	2d 37       	cpi	r18, 0x7D	; 125
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__vector_16+0x40>
		f -= FRACT_MAX;
 1c0:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	a1 1d       	adc	r26, r1
 1c6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 1c8:	20 93 0c 01 	sts	0x010C, r18
	timer0_millis = m;
 1cc:	80 93 08 01 	sts	0x0108, r24
 1d0:	90 93 09 01 	sts	0x0109, r25
 1d4:	a0 93 0a 01 	sts	0x010A, r26
 1d8:	b0 93 0b 01 	sts	0x010B, r27
	timer0_overflow_count++;
 1dc:	80 91 04 01 	lds	r24, 0x0104
 1e0:	90 91 05 01 	lds	r25, 0x0105
 1e4:	a0 91 06 01 	lds	r26, 0x0106
 1e8:	b0 91 07 01 	lds	r27, 0x0107
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	a1 1d       	adc	r26, r1
 1f0:	b1 1d       	adc	r27, r1
 1f2:	80 93 04 01 	sts	0x0104, r24
 1f6:	90 93 05 01 	sts	0x0105, r25
 1fa:	a0 93 06 01 	sts	0x0106, r26
 1fe:	b0 93 07 01 	sts	0x0107, r27
}
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 218:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 21a:	84 b5       	in	r24, 0x24	; 36
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 220:	84 b5       	in	r24, 0x24	; 36
 222:	81 60       	ori	r24, 0x01	; 1
 224:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 226:	85 b5       	in	r24, 0x25	; 37
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 22c:	85 b5       	in	r24, 0x25	; 37
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 232:	ee e6       	ldi	r30, 0x6E	; 110
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 23c:	e1 e8       	ldi	r30, 0x81	; 129
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 248:	80 81       	ld	r24, Z
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 258:	e1 eb       	ldi	r30, 0xB1	; 177
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	84 60       	ori	r24, 0x04	; 4
 260:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 262:	e0 eb       	ldi	r30, 0xB0	; 176
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 26c:	ea e7       	ldi	r30, 0x7A	; 122
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	84 60       	ori	r24, 0x04	; 4
 274:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 27c:	80 81       	ld	r24, Z
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 282:	80 81       	ld	r24, Z
 284:	80 68       	ori	r24, 0x80	; 128
 286:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 288:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
