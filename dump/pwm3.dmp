
/var/folders/gb/zls3cj_s60b1lvx2w2912bg80000gn/T/build1400948152787948260.tmp/pwm.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
  a6:	f8 94       	cli
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	15 b8       	out	0x05, r1	; 5
  ae:	10 92 80 00 	sts	0x0080, r1
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 89 00 	sts	0x0089, r25
  c0:	80 93 88 00 	sts	0x0088, r24
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
  ca:	ef e6       	ldi	r30, 0x6F	; 111
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
  d4:	10 92 85 00 	sts	0x0085, r1
  d8:	10 92 84 00 	sts	0x0084, r1
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <__vector_11>:
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	80 91 0c 01 	lds	r24, 0x010C
  f6:	90 91 0d 01 	lds	r25, 0x010D
  fa:	89 2b       	or	r24, r25
  fc:	f1 f0       	breq	.+60     	; 0x13a <__vector_11+0x5a>
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	15 b8       	out	0x05, r1	; 5
 102:	80 91 88 00 	lds	r24, 0x0088
 106:	90 91 89 00 	lds	r25, 0x0089
 10a:	20 91 02 01 	lds	r18, 0x0102
 10e:	30 91 03 01 	lds	r19, 0x0103
 112:	28 0f       	add	r18, r24
 114:	39 1f       	adc	r19, r25
 116:	30 93 89 00 	sts	0x0089, r19
 11a:	20 93 88 00 	sts	0x0088, r18
 11e:	10 92 0d 01 	sts	0x010D, r1
 122:	10 92 0c 01 	sts	0x010C, r1
 126:	80 91 0e 01 	lds	r24, 0x010E
 12a:	90 91 0f 01 	lds	r25, 0x010F
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 0f 01 	sts	0x010F, r25
 134:	80 93 0e 01 	sts	0x010E, r24
 138:	15 c0       	rjmp	.+42     	; 0x164 <__vector_11+0x84>
 13a:	2d 9a       	sbi	0x05, 5	; 5
 13c:	80 91 88 00 	lds	r24, 0x0088
 140:	90 91 89 00 	lds	r25, 0x0089
 144:	20 91 00 01 	lds	r18, 0x0100
 148:	30 91 01 01 	lds	r19, 0x0101
 14c:	28 0f       	add	r18, r24
 14e:	39 1f       	adc	r19, r25
 150:	30 93 89 00 	sts	0x0089, r19
 154:	20 93 88 00 	sts	0x0088, r18
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 0d 01 	sts	0x010D, r25
 160:	80 93 0c 01 	sts	0x010C, r24
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <loop>:
 176:	20 91 0e 01 	lds	r18, 0x010E
 17a:	30 91 0f 01 	lds	r19, 0x010F
 17e:	80 91 10 01 	lds	r24, 0x0110
 182:	90 91 11 01 	lds	r25, 0x0111
 186:	82 17       	cp	r24, r18
 188:	93 07       	cpc	r25, r19
 18a:	1c f5       	brge	.+70     	; 0x1d2 <loop+0x5c>
 18c:	80 91 0e 01 	lds	r24, 0x010E
 190:	90 91 0f 01 	lds	r25, 0x010F
 194:	90 93 11 01 	sts	0x0111, r25
 198:	80 93 10 01 	sts	0x0110, r24
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__divmodhi4>
 1a4:	fc 01       	movw	r30, r24
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	ec 5f       	subi	r30, 0xFC	; 252
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	91 81       	ldd	r25, Z+1	; 0x01
 1b2:	90 93 01 01 	sts	0x0101, r25
 1b6:	80 93 00 01 	sts	0x0100, r24
 1ba:	20 91 00 01 	lds	r18, 0x0100
 1be:	30 91 01 01 	lds	r19, 0x0101
 1c2:	80 e9       	ldi	r24, 0x90	; 144
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	82 1b       	sub	r24, r18
 1c8:	93 0b       	sbc	r25, r19
 1ca:	90 93 03 01 	sts	0x0103, r25
 1ce:	80 93 02 01 	sts	0x0102, r24
 1d2:	08 95       	ret

000001d4 <main>:
#include <Arduino.h>

int main(void)
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
{
	init();
 1d8:	0e 94 41 01 	call	0x282	; 0x282 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 1e4:	0e 94 bb 00 	call	0x176	; 0x176 <loop>
		if (serialEventRun) serialEventRun();
 1e8:	20 97       	sbiw	r28, 0x00	; 0
 1ea:	e1 f3       	breq	.-8      	; 0x1e4 <main+0x10>
 1ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1f0:	f9 cf       	rjmp	.-14     	; 0x1e4 <main+0x10>

000001f2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 208:	80 91 16 01 	lds	r24, 0x0116
 20c:	90 91 17 01 	lds	r25, 0x0117
 210:	a0 91 18 01 	lds	r26, 0x0118
 214:	b0 91 19 01 	lds	r27, 0x0119
	unsigned char f = timer0_fract;
 218:	30 91 1a 01 	lds	r19, 0x011A

	m += MILLIS_INC;
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	a1 1d       	adc	r26, r1
 220:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 222:	23 2f       	mov	r18, r19
 224:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 226:	2d 37       	cpi	r18, 0x7D	; 125
 228:	20 f0       	brcs	.+8      	; 0x232 <__vector_16+0x40>
		f -= FRACT_MAX;
 22a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	a1 1d       	adc	r26, r1
 230:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 232:	20 93 1a 01 	sts	0x011A, r18
	timer0_millis = m;
 236:	80 93 16 01 	sts	0x0116, r24
 23a:	90 93 17 01 	sts	0x0117, r25
 23e:	a0 93 18 01 	sts	0x0118, r26
 242:	b0 93 19 01 	sts	0x0119, r27
	timer0_overflow_count++;
 246:	80 91 12 01 	lds	r24, 0x0112
 24a:	90 91 13 01 	lds	r25, 0x0113
 24e:	a0 91 14 01 	lds	r26, 0x0114
 252:	b0 91 15 01 	lds	r27, 0x0115
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	a1 1d       	adc	r26, r1
 25a:	b1 1d       	adc	r27, r1
 25c:	80 93 12 01 	sts	0x0112, r24
 260:	90 93 13 01 	sts	0x0113, r25
 264:	a0 93 14 01 	sts	0x0114, r26
 268:	b0 93 15 01 	sts	0x0115, r27
}
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 282:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 284:	84 b5       	in	r24, 0x24	; 36
 286:	82 60       	ori	r24, 0x02	; 2
 288:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 290:	85 b5       	in	r24, 0x25	; 37
 292:	82 60       	ori	r24, 0x02	; 2
 294:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 296:	85 b5       	in	r24, 0x25	; 37
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 29c:	ee e6       	ldi	r30, 0x6E	; 110
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 2a6:	e1 e8       	ldi	r30, 0x81	; 129
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 2b2:	80 81       	ld	r24, Z
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 2b8:	e0 e8       	ldi	r30, 0x80	; 128
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 2c2:	e1 eb       	ldi	r30, 0xB1	; 177
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 2cc:	e0 eb       	ldi	r30, 0xB0	; 176
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 2d6:	ea e7       	ldi	r30, 0x7A	; 122
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 2e6:	80 81       	ld	r24, Z
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 2ec:	80 81       	ld	r24, Z
 2ee:	80 68       	ori	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 2f2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 2f6:	08 95       	ret

000002f8 <__divmodhi4>:
 2f8:	97 fb       	bst	r25, 7
 2fa:	09 2e       	mov	r0, r25
 2fc:	07 26       	eor	r0, r23
 2fe:	0a d0       	rcall	.+20     	; 0x314 <__divmodhi4_neg1>
 300:	77 fd       	sbrc	r23, 7
 302:	04 d0       	rcall	.+8      	; 0x30c <__divmodhi4_neg2>
 304:	0c d0       	rcall	.+24     	; 0x31e <__udivmodhi4>
 306:	06 d0       	rcall	.+12     	; 0x314 <__divmodhi4_neg1>
 308:	00 20       	and	r0, r0
 30a:	1a f4       	brpl	.+6      	; 0x312 <__divmodhi4_exit>

0000030c <__divmodhi4_neg2>:
 30c:	70 95       	com	r23
 30e:	61 95       	neg	r22
 310:	7f 4f       	sbci	r23, 0xFF	; 255

00000312 <__divmodhi4_exit>:
 312:	08 95       	ret

00000314 <__divmodhi4_neg1>:
 314:	f6 f7       	brtc	.-4      	; 0x312 <__divmodhi4_exit>
 316:	90 95       	com	r25
 318:	81 95       	neg	r24
 31a:	9f 4f       	sbci	r25, 0xFF	; 255
 31c:	08 95       	ret

0000031e <__udivmodhi4>:
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	51 e1       	ldi	r21, 0x11	; 17
 324:	07 c0       	rjmp	.+14     	; 0x334 <__udivmodhi4_ep>

00000326 <__udivmodhi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	a6 17       	cp	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	10 f0       	brcs	.+4      	; 0x334 <__udivmodhi4_ep>
 330:	a6 1b       	sub	r26, r22
 332:	b7 0b       	sbc	r27, r23

00000334 <__udivmodhi4_ep>:
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	5a 95       	dec	r21
 33a:	a9 f7       	brne	.-22     	; 0x326 <__udivmodhi4_loop>
 33c:	80 95       	com	r24
 33e:	90 95       	com	r25
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
